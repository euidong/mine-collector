{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["Td","props","nearMineNum","mined","useState","mark","setMark","onClick","e","preventDefault","setTimeout","alert","window","location","reload","upCurrent","onContextMenu","marking","content","showContent","Tr","tdIdx","i","width","tds","map","idx","key","toString","Table","trIdx","height","init","opened","setOpened","value","useCurrent","current","useEffect","openModal","trs","Time","className","time","Modal","setAppElement","Board","setTime","completeTime","useRef","modalIsOpen","setIsOpen","result","HEIGHT","WIDTH","MINE_PERCENT","isMine","lineNums","Array","fill","push","lineMines","j","Math","random","initialBoard","timerID","setInterval","c","clearInterval","isOpen","onRequestClose","onAfterOpen","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb5a8682.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Modal from \"react-modal\";\n\n// ÎûúÎç§Ìïú ÏßÄÎ¢∞ ÏÉùÏÑ±\n// <table>\n// <tr> * 10\n// <td> * 10\n//TODO: Ìè≠ÌÉÑ ÎàåÎ†ÄÏùÑ Îïå, Ï†ÑÏ≤¥ ÎπÑÌôúÏÑ±Ìôî\n//TODO: ÏòÜÏóê Ìè≠ÌÉÑ Í∞ØÏàò ÏÑ∏Í∏∞\nfunction Td (props) {\n    const nearMineNum = props.nearMineNum;\n    const mined = props.mined;\n    const [ mark, setMark ] = useState(\"notting\");\n    \n    const clickHandler = (e) => {\n        e.preventDefault();\n        if (mark === \"notting\") {\n            if (mined) {\n                setMark(\"mine\");\n                setTimeout(() => {\n                    alert(\"Ïã§Ìå®ÏûÖÎãàÎã§. Í≤åÏûÑÏùÑ Ïû¨ÏãúÏûëÌï©ÎãàÎã§.\");\n                    window.location.reload();\n                }, 10);\n            } else {\n                setMark(\"number\");\n                props.upCurrent(+1);\n            }\n        }\n        else if (mark === \"flag\") {\n            setMark(\"notting\");\n            if (mined)\n                props.upCurrent(-1);  \n        }\n        else if (mark === \"mine\") {\n            // nothing\n        }\n        else if (mark === \"number\") {\n            // noting\n        }\n    }\n\n    const contextmenuHandler = (e) => {\n        e.preventDefault();\n        if (mark === \"notting\") {\n            setMark(\"flag\");\n            if (mined)\n                props.upCurrent(+1);\n        }\n        else if (mark === \"flag\") {\n            setMark(\"notting\");\n        }\n        else if (mark === \"mine\") {\n            //nothing\n        }\n        else if (mark === \"number\") {\n            //nothing\n        }\n    }\n\n    const showContent = (marking) => {\n        let content;\n        if(marking === \"notting\")\n            content = \"\";\n        else if (marking === \"number\")\n            content = nearMineNum;\n        else if (marking === \"flag\")\n            content = \"üö©\";\n        else if (marking === \"mine\")\n            content = \"üí£\";\n        return content;\n    }\n    \n    return (<td onClick={clickHandler} onContextMenu={contextmenuHandler}>{showContent(mark)}</td>);\n}\n\nfunction Tr (props) {\n    const tdIdx = [];\n    for (let i = 1;i < props.width + 1; i++) {\n        tdIdx[i] = i;\n    }\n    const tds = tdIdx.map((idx) => \n        (<Td key={idx.toString()} \n            nearMineNum={props.nearMineNum[idx-1]} \n            mined={props.mined[idx-1]} \n            upCurrent={props.upCurrent}/>)\n        );\n    return (\n        <>\n            <tr> \n                {tds} \n            </tr>\n        </>\n    );\n}\n\n\nconst useCurrent = (init) => {\n    const [ opened, setOpened ] = useState(init);\n    const uploadCurrent = (value) => {\n        setOpened(opened + value);\n    };\n\n    return [ opened, uploadCurrent ];\n}\n\n\n// Ìè≠ÌÉÑ Í∞ØÏàòÎ•º Ïπ¥Ïö¥ÌåÖÌï¥Ï£ºÏñ¥Ïïº Ìï®.\n// tdÏùò stateÎ•º Ïó¨Í∏∞ÍπåÏßÄ ÎÅåÏñ¥Ïò¨Î¶∞Îã§.\nfunction Table (props) {\n    const nearMineNum = props.nearMineNum;\n    const mined = props.mined;\n    const trIdx = [];\n    for (let i = 1; i < props.height + 1; i++) {\n        trIdx[i] = i;\n    }\n    const [ current, upCurrent ] = useCurrent(0);\n    useEffect(() => {\n        if (current === props.height * props.width) {\n            props.openModal();\n        } \n    }, [current, props]);\n\n    \n\n    const trs = trIdx.map((idx) => <Tr key={idx.toString()} width={props.width} nearMineNum={nearMineNum[idx-1]} mined={mined[idx-1]} upCurrent={upCurrent}/> );\n    return (\n        <>\n            <table> \n                <tbody>\n                    {trs}\n                </tbody>\n            </table>\n        </>\n    );    \n}\n\n\nfunction Time (props){\n    return (<h1 className= {'Time'}> Time : {props.time}s </h1>);\n}\n\n\nconst initialBoard = (HEIGHT, WIDTH, MINE_PERCENT) => {\n    const nearMineNum = [];\n    const mined = [];\n    let isMine;\n    // 0ÏúºÎ°ú Ï±ÑÏö¥ Î∞∞Ïó¥ ÏÉùÏÑ±\n    for (let i = 0 ; i < HEIGHT; i++) {\n        const lineNums = Array(WIDTH);\n        lineNums.fill(0);\n        nearMineNum.push(lineNums);\n    }\n\n    // mine Ïã¨Í∏∞\n    for (let i = 0 ; i < HEIGHT; i++) {\n        const lineMines = [];\n        for (let j = 0 ; j < WIDTH ; j++) {\n            isMine = Math.random() < MINE_PERCENT;\n            if (isMine) {\n                // ÏÉÅ\n                if (i > 0)\n                    nearMineNum[i-1][j]++;\n                // Ìïò\n                if (i < HEIGHT - 1)\n                    nearMineNum[i+1][j]++;\n                // Ï¢å\n                if (j > 0)\n                    nearMineNum[i][j-1]++;\n                // Ïö∞\n                if (j < WIDTH - 1)\n                    nearMineNum[i][j+1]++;\n                // Î∂ÅÏÑú\n                if (i > 0 && j > 0)\n                    nearMineNum[i-1][j-1]++;\n                // Î∂ÅÎèô\n                if (i > 0 && j < WIDTH - 1)\n                    nearMineNum[i-1][j+1]++;\n                // ÎÇ®ÏÑú\n                if (i < HEIGHT - 1 && j > 0)\n                    nearMineNum[i+1][j-1]++;\n                // ÎÇ®Îèô\n                if (i < HEIGHT - 1 && j < WIDTH - 1)\n                    nearMineNum[i+1][j+1]++;\n            }\n            lineMines.push(isMine);\n        }\n        mined.push(lineMines);    \n    }\n    return [nearMineNum, mined];\n}\n\nModal.setAppElement('#root');\n\nfunction Board () {\n    \n    const [ time, setTime ] = useState(0);\n    const completeTime = useRef();\n    const [modalIsOpen, setIsOpen] = useState(false);\n    const openModal = () => {\n        setIsOpen(true);\n    };\n    const afterOpenModal = () =>{\n        completeTime.current = time;\n    }\n    const closeModal = () => {\n        setIsOpen(false);\n    };\n    \n    const MINE_PERCENT = 0.1;\n    const HEIGHT = 10;\n    const WIDTH = 10;\n\n    const result = useRef(initialBoard(HEIGHT, WIDTH, MINE_PERCENT));\n\n    useEffect(() => {\n        const timerID = setInterval(() => {\n            setTime(c => c+1);\n        }, 1000);\n        return () => {clearInterval(timerID);};\n    }, []);\n\n    return (\n        <>\n            <div className={'Board'}>\n                <h1> Mine Collector </h1>\n                <Time time={time}/>\n                <Table openModal={openModal} mined={result.current[1]} nearMineNum={result.current[0]} width={WIDTH} height={HEIGHT} />\n                <Modal className={'Modal'} isOpen={modalIsOpen}\n                    onRequestClose={closeModal}\n                    onAfterOpen={afterOpenModal}>\n                    <p>Ï∂ïÌïòÌï©ÎãàÎã§. {completeTime.current}Ï¥à Í±∏Î†∏ÏäµÎãàÎã§.</p>\n                </Modal>\n            </div>\n        </>\n    );\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}